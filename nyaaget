#!/usr/bin/env python3

import feedparser
import sys
import os

search_url = "https://nyaa.si/?page=rss&q={0}&sort={1}&offset={2}"
add_command = "transmission-remote localhost -a '{0}' > /dev/null"


def get_search(search, sort=1, page=1):
    feed = feedparser.parse(search_url.format(search, sort, page))
    result = list()
    for entry in feed['entries']:
        title   = entry['title']
        link    = entry['link']
        seed_s  = entry['nyaa_seeders']
        size    = entry['nyaa_size']

        # Pretty print seeders
        seed_i = int(seed_s)
        if seed_i >= 1000:
            seed_i = round(seed_i / 1000)
            seeders = "{}k seeders".format(seed_i)
        else:
            seeders = "{} seeders".format(seed_i)

        result.append((title, link, seeders, size))
    return result


class Pager:
    page = 1
    sort = 1
    search = ""
    results_buf = []

    class SORT_MODE:
        DATE = 1
        SEEDERS = 2

    def __init__(self, results_per_page):
        self.results_per_page = results_per_page

    def __reset(self):
        self.page = 1
        self.results_buf = []

    def __refill(self):
        self.results_buf.extend(get_search(self.search, self.sort, self.page))
        self.page = self.page + 1

    def set_search(self, search, sort=0):
        self.__reset()
        self.search = search
        if sort:
            self.sort = sort

    def set_sort(self, sort):
        self.__reset()
        self.sort = sort

    def next_page(self):
        if(len(self.results_buf) < self.results_per_page):
            self.__refill()
        ret_list = self.results_buf[:self.results_per_page]
        self.results_buf = self.results_buf[self.results_per_page:]
        return ret_list


def add_magnet(magnet):
    os.system(add_command.format(magnet))


if __name__ == "__main__":
    page = 1
    search = ""
    search_pager = Pager(20)

    if len(sys.argv) > 1:
        search = " ".join(sys.argv[1:])
        search_pager.set_search(search)

    results = search_pager.next_page()
    while True:
        # Terminal size
        columns = int(os.popen('stty size', 'r').read().split()[1])

        # Print header
        header = "--- {0} --- Page {1} ---".format(search, page)
        print("{1:-<{0}}".format(columns, header))

        # Print results
        for i in range(0, len(results)):
            result_left = "{0:02d}) {1}".format(i + 1, results[i][0])
            result_right = "[{0:>11} :: {1:9}]".format(results[i][2], results[i][3])
            # print(result_left)
            # print(result_right)
            print("{1:{0}.{0}}{2}".format(columns-len(result_right), result_left, result_right))
        # try:
        s = input('--> ')
        print(s)
        # except:
        #   break

        if s == "":
            page = page + 1
            results = search_pager.next_page()
            continue
        elif s == "q":
            break
        elif s == "date":
            page = 1
            search_pager.set_sort(Pager.SORT_MODE.DATE)
            results = search_pager.next_page()
        elif s == "seed":
            page = 1
            search_pager.set_sort(Pager.SORT_MODE.SEEDERS)
            results = search_pager.next_page()
        elif s.split(' ')[0].isdigit():
            toget = s.split(' ')
            for x in toget:
                if x.isdigit() and int(x) >= 1 and int(x) <= len(results):
                    add_magnet(results[int(x) - 1][1])
        elif s.split('-')[0].isdigit() and s.split('-')[1].isdigit():
            toget = s.split('-')
            for x in range(int(toget[0]), int(toget[1]), 1 if int(toget[0]) < int(toget[1]) else -1):
                add_magnet(results[int(x) - 1][1])
            add_magnet(results[int(toget[1]) - 1][1])
        else:
            page = 1
            search = s
            search_pager.set_search(search)
            results = search_pager.next_page()
